// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array chars;
    field int count, maxChars;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength < 0) {
            do Sys.error(14);
        }

        let maxChars = maxLength;
        if (maxLength = 0) {
            let chars = 0;
        } else {
            let chars = Array.new(maxLength);
        }
        let count = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (~chars = 0) {
            do Memory.deAlloc(chars);
        }
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return count;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (j > (count - 1)) {
            do Sys.error(15);
        }
        return chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (j > (count - 1)) {
            do Sys.error(16);
        }
        let chars[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (maxChars = count) {
            do Sys.error(17);
        }
        let chars[count] = c;
        let count = count + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (count = 0) {
            do Sys.error(18);
        }
        let chars[count] = 0;
        let count = count - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int v, i, j, k, d;
        var boolean negative;
        
        if (chars[0] < 48 | chars[0] > 57) {
            return 0;
        }

        let i = 0;
        if (chars[0] = 45) {
            let negative = true;
            let i = 1;
        }

        let k = count;
        let j = i;
        while (j < count) {
            if (chars[j] < 48 | chars[j] > 57) {
                let k = j;
                let j = count;
            }
            let j = j + 1;
        }

        let v = 0;
        while (i < k) {
            let d = chars[i] - 48;
            let v = v * 10 + d;
            let i = i + 1;
        }

        if (negative) {
            let v = v * -1;
        }
        return v;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int lastDigit, n, i;
        var Array temp;

        let count = 0;
        if (val < 0) {
            do appendChar(45);
        }

        let temp = Array.new(5);
        let n = Math.abs(val);
        let i = 0;
        while (n > 9) {
            let lastDigit = n - ((n / 10) * 10);
            let temp[i] = lastDigit + 48;
            let n = n / 10;
            let i = i + 1;
        }
        let temp[i] = n + 48;

        if (maxChars - count < i) {
            do Sys.error(19);
        }

        while (i > -1) {
            do appendChar(temp[i]);
            let i = i - 1;
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
