// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array memory;
    static Array freeList;

    /** Initializes the class. */
    function void init() {
        let memory = 0;
        let freeList = 2048;
        let freeList[0] = 16383 - 2048;
        let freeList[1] = null;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array cursor;
        var Array block;

        if (size < 0) {
            do Sys.error(5);
        }

        let cursor = freeList;
        while (true) {
            if (cursor[0] > size) {
                let block = cursor + (cursor[0] - (size + 1));
                let block[-1] = size + 1;
                let cursor[0] = cursor[0] - (size + 1);
                return block;
            }
            if (~cursor[1] = null) {
                do Sys.error(6);
                return 0;
            }
            let cursor = cursor[1];
        }
        return 0;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array cursor;
        var Array segment;

        let segment = o - 1;
        let segment[0] = o[-1];

        let cursor = freeList;
        while (~cursor[1] = null) {
            let cursor = cursor[1];
        }
        let cursor[1] = segment;
        return;
    }
}
